const path = require("path");
const express = require("express");
require("dotenv").config();

global.__basedir = __dirname;

const app = express();
const http = require("http");
const server = http.createServer(app);
const { Server } = require("socket.io");

const io = new Server(server, {
  cors: {
    origin: "http://localhost:3030", // ƒê·∫£m b·∫£o ƒë√∫ng origin c·ªßa React app
    methods: ["GET", "POST", "PUT", "DELETE"], // Li·ªát k√™ ƒë·ªß c√°c method
    credentials: true // Quan tr·ªçng ƒë·ªÉ cho ph√©p g·ª≠i cookie/auth headers
  },
  pingInterval: 45000, // TƒÉng l√™n 45 gi√¢y (m·∫∑c ƒë·ªãnh 25 gi√¢y)
  pingTimeout: 30000
});

const db = require("./models");
const { spawn } = require('child_process');

// ƒê·ªëi t∆∞·ª£ng ƒë·ªÉ l∆∞u tr·ªØ c√°c lu·ªìng FFmpeg v√† namespace Socket.IO ƒëang ho·∫°t ƒë·ªông
// ƒê√É TH√äM thu·ªôc t√≠nh 'jpegBuffer' v√†o m·ªói ƒë·ªëi t∆∞·ª£ng stream
const activeStreams = {}; // key: cameraId, value: { ffmpegProcess: ChildProcess, namespace: SocketIONamespace, jpegBuffer: Buffer }

// Initialize database connection and models
const initializeDatabase = async () => {
  try {
    await db.sequelize.authenticate();
    console.log('‚úÖ ƒê√£ k·∫øt n·ªëi t·ªõi MySQL th√†nh c√¥ng!');

    // Sync all models
    await db.sequelize.sync();
    console.log('‚úÖ Models synchronized successfully');

    return true;
  } catch (err) {
    console.error('‚ùå L·ªói k·∫øt n·ªëi t·ªõi MySQL:', err);
    return false;
  }
};

const rtsp = require("rtsp-ffmpeg"); // C√≥ v·∫ª nh∆∞ b·∫°n kh√¥ng d√πng rtsp-ffmpeg tr·ª±c ti·∫øp, ch·ªâ d√πng ffmpeg qua child_process

const authRoute = require("./route/auth");
const accountRoute = require("./route/account");
const activityRoute = require("./route/activity");
const classroomRoute = require("./route/classroom");
const cameraRoute = require("./route/camera");
const videoRoute = require("./route/video");
const resultRoute = require("./route/activity-sequence");
const boundingBoxRoute = require("./route/boundingbox");
const statisticsRoute = require("./route/statistics");

var cors = require("cors");
const verifyToken = require("./middleware/verifyToken");

app.use(cors());
app.use(express.urlencoded({ limit: "200mb", extended: true }));
app.use(express.json({ limit: "200mb" }));

// react build
app.use(express.static(path.resolve(__dirname, "../client/build")));

// H√†m ƒë·ªÉ kh·ªüi ƒë·ªông FFmpeg v√† thi·∫øt l·∫≠p Socket.IO cho m·ªôt camera c·ª• th·ªÉ
async function startCameraStream(cameraId) {
  if (activeStreams[cameraId]) {
    console.log(`‚ÑπÔ∏è Stream for cam ${cameraId} is already active.`);
    return; // ƒê√£ c√≥ stream, kh√¥ng c·∫ßn kh·ªüi ƒë·ªông l·∫°i
  }

  try {
    const camera = await db.camera.findOne({
      where: { id: cameraId },
    });

    if (!camera) {
      console.error(`‚ùå Camera with ID ${cameraId} not found.`);
      return;
    }

    console.log(`üì∫ Starting RTSP stream for cam ${cameraId} from: ${camera.streamLink}`);

    const ffmpegPath = '/opt/homebrew/bin/ffmpeg';
    const videoInputPath = camera.streamLink;

    const ffmpegArgs = [
      '-loglevel', 'warning',
      '-stream_loop', '-1',
      '-i', videoInputPath,
      '-hide_banner',
      '-an',                  // Kh√¥ng √¢m thanh
      '-f', 'image2pipe',
      '-pix_fmt', 'yuvj422p',
      '-vcodec', 'mjpeg',
      '-q:v', '5',            // Ch·∫•t l∆∞·ª£ng JPEG: Th·ª≠ 5. (s·ªë nh·ªè h∆°n = ch·∫•t l∆∞·ª£ng t·ªët h∆°n = dung l∆∞·ª£ng l·ªõn h∆°n)
                              // N·∫øu v·∫´n m·ªù, th·ª≠ 3. N·∫øu lag, th·ª≠ 7-10.
      '-vf', 'scale=960:-1',  // ƒê·ªô ph√¢n gi·∫£i: 960px chi·ªÅu r·ªông (HD-ready).
                              // N·∫øu mu·ªën n√©t h∆°n v√† ch·∫•p nh·∫≠n t·∫£i n·∫∑ng h∆°n, th·ª≠ 'scale=1280:-1'.
                              // N·∫øu v·∫´n gi·∫≠t/lag, th·ª≠ gi·∫£m xu·ªëng 'scale=800:-1' ho·∫∑c '640:-1'.
      '-r', '15',              // T·ªëc ƒë·ªô khung h√¨nh: 15 FPS.
                              // N·∫øu video qu√° gi·∫≠t, th·ª≠ 20 ho·∫∑c 25. N·∫øu qu√° lag, th·ª≠ gi·∫£m xu·ªëng 10.
      '-'
    ];

    console.log(`[DEBUG-FFMPEG-SPAWN] Spawning: ${ffmpegPath} ${ffmpegArgs.join(' ')}`);

    const ffmpegProcess = spawn(ffmpegPath, ffmpegArgs, { detached: false });

    const ns = io.of("/cam" + cameraId);
    // KH·ªûI T·∫†O activeStreams[cameraId] V·ªöI jpegBuffer R·ªñNG
    activeStreams[cameraId] = { ffmpegProcess, namespace: ns, jpegBuffer: Buffer.alloc(0) };

    // Khai b√°o bi·∫øn ki·ªÉm so√°t t·ªëc ƒë·ªô g·ª≠i khung h√¨nh
    let lastFrameTime = 0;
    const targetFps = 15; // Ph·∫£i kh·ªõp v·ªõi '-r' trong ffmpegArgs
    const frameInterval = 1000 / targetFps;

    // --- B·∫ÆT ƒê·∫¶U PH·∫¶N THAY ƒê·ªîI QUAN TR·ªåNG NH·∫§T ---
    ffmpegProcess.stdout.on('data', (chunk) => {
        // L·∫•y buffer hi·ªán t·∫°i c·ªßa stream n√†y t·ª´ activeStreams
        let currentJpegBuffer = activeStreams[cameraId].jpegBuffer;
        
        // Gh√©p chunk m·ªõi v√†o buffer hi·ªán c√≥
        currentJpegBuffer = Buffer.concat([currentJpegBuffer, chunk]);

        let offset = 0;
        while (offset < currentJpegBuffer.length) {
            // T√¨m ƒëi·ªÉm b·∫Øt ƒë·∫ßu c·ªßa m·ªôt file JPEG (SOI: 0xFF D8)
            const soi = currentJpegBuffer.indexOf(Buffer.from([0xFF, 0xD8]), offset);
            if (soi === -1) {
                // Kh√¥ng t√¨m th·∫•y SOI t·ª´ v·ªã tr√≠ hi·ªán t·∫°i tr·ªü ƒëi, gi·ªØ l·∫°i ph·∫ßn c√≤n l·∫°i c·ªßa buffer
                currentJpegBuffer = currentJpegBuffer.slice(offset);
                break;
            }

            // T√¨m ƒëi·ªÉm k·∫øt th√∫c c·ªßa m·ªôt file JPEG (EOI: 0xFF D9)
            // B·∫Øt ƒë·∫ßu t√¨m EOI sau SOI ƒë·ªÉ tr√°nh nh·∫ßm l·∫´n
            const eoi = currentJpegBuffer.indexOf(Buffer.from([0xFF, 0xD9]), soi + 2);
            if (eoi === -1) {
                // Kh√¥ng t√¨m th·∫•y EOI, nghƒ©a l√† frame ch∆∞a ho√†n ch·ªânh.
                // Gi·ªØ l·∫°i ph·∫ßn buffer t·ª´ SOI tr·ªü ƒëi ƒë·ªÉ ch·ªù th√™m d·ªØ li·ªáu.
                currentJpegBuffer = currentJpegBuffer.slice(soi);
                break;
            }

            // ƒê√£ t√¨m th·∫•y m·ªôt frame JPEG ho√†n ch·ªânh
            const completeFrame = currentJpegBuffer.slice(soi, eoi + 2);

            const currentTime = Date.now();

            // Ch·ªâ g·ª≠i d·ªØ li·ªáu n·∫øu ƒë√£ ƒë·ªß 'frameInterval' v√† c√≥ client k·∫øt n·ªëi
            if (currentTime - lastFrameTime >= frameInterval && ns.sockets.size > 0) {
                ns.emit("data", completeFrame.toString("base64")); // G·ª≠i CH·ªà frame ho√†n ch·ªânh
                lastFrameTime = currentTime; // C·∫≠p nh·∫≠t th·ªùi gian g·ª≠i cu·ªëi c√πng
            }

            // C·∫≠p nh·∫≠t offset ƒë·ªÉ t√¨m frame ti·∫øp theo (b·∫Øt ƒë·∫ßu sau EOI c·ªßa frame v·ª´a t√¨m th·∫•y)
            offset = eoi + 2;
        }
        // C·∫≠p nh·∫≠t l·∫°i buffer ch√≠nh cho stream n√†y trong activeStreams
        activeStreams[cameraId].jpegBuffer = currentJpegBuffer;
    });
    // --- K·∫æT TH√öC PH·∫¶N THAY ƒê·ªîI QUAN TR·ªåNG NH·∫§T ---


    ffmpegProcess.stderr.on('data', (data) => {
        console.error(`[DEBUG-FFMPEG-STDERR] for cam ${cameraId}: ${data.toString()}`);
    });

    ffmpegProcess.on('close', (code) => {
        console.log(`[DEBUG-FFMPEG] FFmpeg process for cam ${cameraId} exited with code ${code}`);
        // X√≥a kh·ªèi activeStreams khi process FFmpeg d·ª´ng
        if (activeStreams[cameraId]) {
            delete activeStreams[cameraId];
        }
        // Th·ª≠ l·∫°i kh·ªüi ƒë·ªông n·∫øu kh√¥ng ph·∫£i do ng∆∞·ªùi d√πng d·ª´ng (code 0) v√† c√≥ l·ªói
        if (code !== 0) {
            console.warn(`Attempting to restart stream for cam ${cameraId} after unexpected exit.`);
            // C√≥ th·ªÉ th√™m logic retry c√≥ gi·ªõi h·∫°n ·ªü ƒë√¢y
            // setTimeout(() => startCameraStream(cameraId), 5000); // Th·ª≠ l·∫°i sau 5 gi√¢y
        }
    });

    ffmpegProcess.on('error', (err) => {
        console.error(`[DEBUG-FFMPEG] Failed to spawn FFmpeg process for cam ${cameraId}: ${err.message}`);
        console.error(err);
        if (activeStreams[cameraId]) {
            delete activeStreams[cameraId];
        }
    });

    // X·ª≠ l√Ω k·∫øt n·ªëi Socket.IO cho namespace n√†y
    ns.on("connection", function (wsocket) {
        // ƒê√£ s·ª≠a l·∫°i ns.server.engine.clientsCount th√†nh ns.sockets.size ƒë·ªÉ l·∫•y s·ªë l∆∞·ª£ng client trong namespace n√†y.
        // ns.server.engine.clientsCount l√† t·ªïng s·ªë client k·∫øt n·ªëi ƒë·∫øn server Socket.IO, kh√¥ng ph·∫£i ch·ªâ namespace n√†y.
        console.log(`ü§ù Client connected to /cam${cameraId}. Total clients in namespace: ${ns.sockets.size}`);

        wsocket.on("disconnect", function () {
            console.log(`üëã Client disconnected from /cam${cameraId}. Remaining clients in namespace: ${ns.sockets.size}`);
            // D·ª´ng FFmpeg process n·∫øu kh√¥ng c√≤n client n√†o trong namespace n√†y
            // ƒê√£ s·ª≠a l·∫°i ns.server.engine.clientsCount th√†nh ns.sockets.size
            if (activeStreams[cameraId] && ns.sockets.size === 0) {
                console.log(`üõë Stopping FFmpeg for cam ${cameraId} as no clients are connected to its namespace.`);
                activeStreams[cameraId].ffmpegProcess.kill('SIGINT'); // G·ª≠i t√≠n hi·ªáu d·ª´ng cho FFmpeg
            }
        });
    });

  } catch (error) {
    console.error(`üî• Error starting stream for cam ${cameraId}:`, error);
  }
}

// Initialize database and start server
initializeDatabase().then(success => {
  if (!success) {
    console.error('Failed to initialize database. Server will not start.');
    process.exit(1);
  }

  //test api
  app.get("/api/info", (req, res) => {
    res.json({ message: "Hello from server!" });
  });

  //routing
  app.use("/api/auth", authRoute);
  app.use("/api/account", verifyToken, accountRoute);
  app.use("/api/activity", verifyToken, activityRoute);
  app.use("/api/classroom", verifyToken, classroomRoute);
  app.use("/api/camera", verifyToken, cameraRoute);
  app.use("/api/video", verifyToken, videoRoute);
  app.use("/api/result", verifyToken, resultRoute);
  app.use("/api/boundingbox", verifyToken, boundingBoxRoute);
  app.use("/api/statistics", verifyToken, statisticsRoute);
  app.use(
    "/storage",
    express.static(
      path.resolve(
        __dirname,
        "../../storage"
      )
    )
  );

  app.get("/api/stream/:cameraId", verifyToken, async (req, res) => {
    const cameraId = req.params.cameraId;
    // G·ªçi h√†m kh·ªüi ƒë·ªông lu·ªìng, h√†m n√†y s·∫Ω ki·ªÉm tra xem lu·ªìng ƒë√£ ch·∫°y ch∆∞a
    await startCameraStream(cameraId);

    // Ch·ªâ c·∫ßn b√°o th√†nh c√¥ng l√† client c√≥ th·ªÉ k·∫øt n·ªëi Socket.IO
    res.json({
        success: true,
        message: "Stream initialization requested. Connect via Socket.IO to /cam" + cameraId,
    });
  });


  // Socket.IO global connection (cho m·ª•c ƒë√≠ch kh√°c n·∫øu c√≥)
  // Trong tr∆∞·ªùng h·ª£p n√†y, c√≥ th·ªÉ kh√¥ng c·∫ßn thi·∫øt n·∫øu t·∫•t c·∫£ c√°c lu·ªìng ƒë·ªÅu d√πng namespace ri√™ng
  io.on("connection", function (socket) {
    // console.log("A client connected to the root Socket.IO namespace.");
    socket.emit("start", "connected"); // ƒê√¢y c√≥ th·ªÉ l√† m·ªôt tin nh·∫Øn kh·ªüi t·∫°o chung
  });

  // routing to react app
  app.get("*", (req, res) => {
    res.sendFile(path.resolve(__dirname, "../client/build", "index.html"));
  });

  server.listen(process.env.PORT, () =>
    console.log(`Server start on port ${process.env.PORT}`)
  );
  server.timeout = 5 * 60 * 1000;
});
