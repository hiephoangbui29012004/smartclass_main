/* eslint-disable */
import {
  Button,
  createStyles,
  makeStyles,
  MenuItem,
  Paper,
  Select,
  Theme,
} from "@material-ui/core";
import React from "react";
import { io } from "socket.io-client";
import { useAppDispatch, useAppSelector } from "../../app/hooks";
import IconImage from "../../components/IconImage";
import PageHeader from "../../components/PageHeader";
import { getAllCamera } from "../Camera/cameraSlice";
import videoService from "./video.services";

interface Props {}
const useStyles = makeStyles((theme: Theme) =>
  createStyles({
    root: {
      display: "flex",
      width: "100%",
      flexFlow: "column nowrap",
      alignItems: "strech",
    },
    content: {
      display: "flex",
      width: "100%",
      padding: theme.spacing(4),
      flexFlow: "column nowrap",
      alignItems: "center",
      overflowX: "auto",
    },
    content2: {
      display: "flex",
      width: "100%",
      padding: theme.spacing(4),
      flexFlow: "row nowrap",
      alignItems: "center",
      justifyContent: "center",
    },
    liveVideo: {
      width: "100%", // Chi·∫øm to√†n b·ªô chi·ªÅu r·ªông c·ªßa ph·∫ßn t·ª≠ cha
      maxWidth: "1280px", // ƒê·∫£m b·∫£o kh√¥ng qu√° l·ªõn n·∫øu ph·∫ßn t·ª≠ cha qu√° r·ªông
      height: "auto", // T·ª± ƒë·ªông t√≠nh chi·ªÅu cao ƒë·ªÉ gi·ªØ t·ª∑ l·ªá
      aspectRatio: "16 / 9", // Th√™m d√≤ng n√†y ƒë·ªÉ c·ªë ƒë·ªãnh t·ª∑ l·ªá 16:9 cho khung h√¨nh (hi·ªán ƒë·∫°i h∆°n width/height)
                           // ƒê·∫£m b·∫£o t·ª∑ l·ªá n√†y kh·ªõp v·ªõi output c·ªßa FFmpeg ·ªü backend
      objectFit: "contain",
      display: "block",
    },
    select: {
      width: "50%",
    },
  })
);
const RealtimeVideo = (props: Props) => {
  const classes = useStyles();
  const cameras = useAppSelector((state) => state.camera.data);
  const refSocket = React.useRef<any>();
  const dispatch = useAppDispatch();

  const [src, setSrc] = React.useState<any>();
  const [camId, setcamId] = React.useState<any>(null);
  const animationFrameRef = React.useRef<number | null>(null);

  React.useEffect(() => {
    return () => {
      if (refSocket.current) {
        refSocket.current.removeAllListeners();
        refSocket.current.disconnect(); // ƒê·∫£m b·∫£o disconnect khi component unmount
      }
      if (animationFrameRef.current) { // H·ªßy animation frame khi component b·ªã h·ªßy
        cancelAnimationFrame(animationFrameRef.current);
      }
    };
  }, []);

  React.useEffect(() => {
    dispatch(getAllCamera());
  }, [dispatch]);
  return (
    <div className={classes.root}>
      <PageHeader
        icon={<IconImage icon="LiveTV" width={80} height={80} />}
        title="Lu·ªìng ph√°t tr·ª±c ti·∫øp"
      ></PageHeader>
      <Paper className={classes.content2}>
        <label style={{ marginRight: "2rem", fontWeight: "bold" }}>
          Ch·ªçn Camera:
        </label>
        <Select
          className={classes.select}
          id="demo-simple-select"
          onChange={(e) => {
            setcamId(e.target.value);
          }}
        >
          {cameras.map((item: any) => (
            <MenuItem value={item.id}>{item.name}</MenuItem>
          ))}
        </Select>
        <Button
  style={{ marginLeft: "2rem" }}
  color="primary"
  onClick={() => {
    videoService.getStream(camId).then(() => {
      if (refSocket.current) {
        refSocket.current.disconnect();
        refSocket.current.removeAllListeners();
      }
      // ƒê·∫£m b·∫£o d√≤ng n√†y ƒëang s·ª≠ d·ª•ng bi·∫øn m√¥i tr∆∞·ªùng:
      const socketUrl = `${process.env.REACT_APP_SOCKET_URL}/cam${camId}`;
          console.log("Attempting to connect Socket.IO to:", socketUrl);
          // K·∫æT TH√öC ƒêO·∫†N CODE TH√äM

          refSocket.current = io(socketUrl);

      refSocket.current.on("connect", () => {
        console.log("‚úÖ Socket.IO connected!");
      });
      refSocket.current.on("connect_error", (error: any) => {
        console.error("‚ùå Socket.IO connection error:", error);
      });
      refSocket.current.on("data", function (data: any) {
        console.log("üì° Received data from server. Data size:", data.length);
        setSrc("data:image/jpeg;base64," + data);
      });
      refSocket.current.on("disconnect", () => {
        console.log("üëã Socket.IO disconnected.");
      });
    });
  }}
>
  Xem
</Button>
      </Paper>
      <Paper className={classes.content}>
      <img
  className={classes.liveVideo}
  id="live-video-div"
  src={src}
  alt=""
></img>
      </Paper>
    </div>
  );
};

export default RealtimeVideo;
